Guide for the /usr/bin/ece Script

* TAB completion
The ece script offers TAB completion, given that your version of BASH
supports this and that you have enabled it (some distributions hasn't
turned on BASH completion per default).

** Completing ece commands
You will find yourself using this regularly, both for speed, but also
to remember all the different options and their correct wording:
#+BEGIN_SRC sh
$ ece TAB TAB
applog      deploy      log         start       threaddump  
assemble    help        outlog      status      update      
clean       kill        restart     stop        versions 
#+END_SRC
The commands are all described in detail in "ece help"

** Completing types of servers the ece scripts can operate on
#+BEGIN_SRC sh
$ ece -t TAB TAB
analysis  engine    rmi-hub   search 
#+END_SRC

** Completing the publication resources available
The ece script can update the publication resources for a given
publication.

To help selecting the correct publication resource, you can make ece
list and complete the available resource names:
#+BEGIN_SRC sh
$ ece -p mypub -r TAB TAB
content-type   image-version  layout-group   
feature        layout         menu
#+END_SRC
* Getting an overview of all available options
#+BEGIN_SRC sh
$ ece help
Usage: /home/torstein/bin/ece [-t <type>] [-i <instance>] <command>

DESCRIPTION
 -t --type <type>
      The following types are available:
      engine  -  The Escenic Content Engine, this is the default
                 and is the assumed type if none is specified.
      search  -  A standalone search indexer and solr instance
      rmi-hub -  The RMI hub responsible for the internal 
                 communication between the ECE instances.
      analysis - The Escenic Analysis Engine also knows as 'Stats'

 -i --instance <instance>
      The type instance, such as editor1, web1 or search1

 -p --publication <publication>
      Needed only for updating publication resources

 -r --resource <resource>
      Used for updating publication resources.
      Must be one of: content-type, feature, layout, layout-group
                      image-version, menu

 -v --verbose
      Prints out debug statements, useful for debugging.

The following commands are available:
   applog     the type's app server log
   assemble   runs the Assembly Tool *)
   clean      removes temporary files created by /home/torstein/bin/ece *)
   deploy     deploys the assembled EAR *)
   help       prints this help screen
   kill       uses force to stop the type
   log        the type's Log4J log
   outlog     the [ece#engine] script log (system out log)
   restart    restarts the type
   start      starts the type
   status     checks if the type is running
   stop       stops the type
   threaddump write a thread dump to standard out (system out log)
   update     update publication resources
   versions   lists the ECE component versions

*) only applicable if type is 'engine'
#+END_SRC

* Tailing log files
The script has a number of options to let you keep track of what's
going on on your system.

** Getting an overview of the log files
The ece script will be more than happy to tell you about the log files
on your system that are of interest to your instance:
#+BEGIN_SRC sh
$ ece -i dev1 loglist
[ece#engine-dev1] System out log: /var/log/escenic/engine-dev1.out
[ece#engine-dev1] App server log: /opt/tomcat-dev1/logs/localhost.2011-09-20.log
[ece#engine-dev1] log4j log: /var/log/escenic/messages
#+END_SRC

** Commands for tailing the log files
There are three different logs, which ece will let you tail. When
tailing the log file, ece will also first print out where the file is
located on the file system so you can open it later for further
inspection. 

#+BEGIN_SRC sh
$ ece -i dev1 outlog
[ece#engine-dev1] Tailing the system out log /var/log/escenic/engine-dev1.out
#+END_SRC

The available log file commands are:
- outlog :: the system out log
- applog :: the app server log 
- log :: the log4j log

** Piping the log files to another command
If you wish to pass the log files onto another pipe, for instance to
grep all the log files for a certain exception or error message, you
will find the -q parameter useful:
#+BEGIN_SRC sh
$ ece -i dev1 -q loglist | xargs grep IllegalArgumentException
#+END_SRC

This approach is also useful if you wish to tail all the log files at
once: 
#+BEGIN_SRC sh
$ ece -i dev1 -q loglist | xargs tail -f
#+END_SRC

* Assembling a new EAR
The script will quite happily assemble your EAR file. Please note that
you need to run 
#+BEGIN_SRC sh
$ ece -i clean assemble
#+END_SRC
whenever you've upgraded either ECE or one of its plugins. The script
will try to take care of you though and warn you of such duplication:
#+BEGIN_SRC sh
[ece#engine] Multiple versions of ECE and/or 3rd party libraries found.
[ece#engine] Remember, you need to run 'ece clean assemble' when
[ece#engine] upgrading either ECE or one of the plugins.
[ece#engine] I will now clean it up for you and re-run the assembly.
[ece#engine] Cleaning up generated files in /opt/escenic/assemblytool ...
[ece#engine] Assembling your EAR file ...
#+END_SRC

If you're just re-running the assembly after just adding a new plugin
or want to re-build your publications after template changes, you can
omit the clean command and just run:
#+BEGIN_SRC sh
$ ece assembly
#+END_SRC

The EAR produced is now ready to be deployed with
#+BEGIN_SRC sh
$ ece [-i <instance>] deploy
#+END_SRC
* Installation
The ece script and ece.conf may be used on any Unix like system that
has a fairly recent version of BASH installed.

** Overview of File Paths Used by the ece script
These are recommended files and locations for using the ece script:

|----------------------------------+----------------------------------|
| Path                             | Explanation                      |
|----------------------------------+----------------------------------|
| /usr/bin/ece                     | The script itself                |
| /etc/escenic/ece.conf            | The main configuration file      |
| /etc/escenic/ece-<instance>.conf | Instance specific settings       |
| /var/cache/escenic               | Directory of assembled EAR files |
| /tmp                             | Directory for temporary files    |
|----------------------------------+----------------------------------|

As you can see in ece.conf, there are a number of default locations
dealing with log files, pid files, crash files as well as application
server files. The defaults all follow the File Hierarchy Standard, but
you may of course change these to your liking.

If you wish to put the .conf files in other places, you may like to know
that the ece script has preset list of locations where it looks for
the .conf files mentioned above, namely:

- current working directory
- /etc/escenic/<type>/instance/<instance name>
- /etc/escenic/<type>/host/<hostname>
- /etc/escenic/<type>/common
- /etc/escenic/<type>
- /etc/escenic
- <current working direcotry>/../etc

You may override this list of locations by setting the
this environment variable in your .bashrc or similar:
#+BEGIN_SRC sh
ECE_CONF_LOCATIONS 
#+END_SRC

The reason for having so many options is because various Escenic
consultants, partners and customers have requested these locations to
fit their systems. As you can see, fitting everyone's fancy adds up
over time :-)

* Running the ece script
** You must run it as a non-privileged user
You must be normal user to run the ece script, otherwise it will
complain:
#+BEGIN_SRC sh
[ece#engine] Sorry, you cannot be root when running ece
[ece#engine] The root user can only use /etc/init.d/ece
#+END_SRC

As it mentions, the root user may use the init.d script and the
accompanying /etc/default/ece to command the different ECE, EAE and
RMI hub instances on your system.
** Specifying the instance
The script is made for being easy to use with multiple instances on
the same host. You specify the instance you want to operate on using
the -i parameter. E.g. to assemble and deploy the editor1 instance, you'd
do:
#+BEGIN_SRC sh
$ ece -i editor1 assemble deploy restart
#+END_SRC

The script's TAB completion will also help you with completing the
available instances on your system, so you can just type:
#+BEGIN_SRC sh
$ ece -i TAB TAB
mypub myotherpub
#+END_SRC

For this to work, the script assumes that you have installed the
instance specific configuration in /etc/escenic/engine/instance, as is
described in the Escenic Content Engine Installation Guide.

If you only have one instance installed, you may omit
the --instance/-i parameter. However, if you're running ece from another
script (e.g. an init.d or a deployment script), we recommend you to
always specify the --instance/-i parameter to make sure that future
additions of instances don't break your old scripts which assumed that
only one instance was installed.

** TAB completion
The ece script offers TAB completion of all commands, options and
option values. For this to work, you need the completion file loaded
from your .bashrc. 

This can either be done by enabling all BASH completions on your
system (some systems have this set up per default), refer to your OS
documentation for this.

Alternatively, to just enable the ece completion, simply add the
following line to your .bashrc:
#+BEGIN_SRC sh
. /etc/bash_completion.d/ece
#+END_SRC
Naturally, the bash_comletion.d needs to be in the above location :-)
* Backup
One of the many features of the ece script, is that you can take a
snapshot of your current running system, which can then be restored
using the /usr/sbin/ece-install script. 

The backup will include the database, the Nursery configuration, the
DB configuration, the Varnish configuration, the nginx congiguration,
all the Escenic software binaries, your publication and your
application servers.

To create the backup, you'll simply do:
#+BEGIN_SRC sh
$ ece -i editor1 backup
#+END_SRC

It will then create tarball with everything and put it in 
#+BEGIN_SRC sh
/var/backups/escenic
#+END_SRC

Sometimes, you only want to take a backup of the data files and are
not so concerned with the Escenic and application server binaries as
these are easily installed from elsewhere. If so, you may do the
following:
#+BEGIN_SRC sh
$ ece -i editor1 backup --exclude-binaries
#+END_SRC

When running in a production environment, it's advised to first stop
the search instance which runs the Solr indexer, so that the Solr
index isn't corrupted:
#+BEGIN_SRC sh
$ ece -i search1 stop
$ ece -i editor1 backup
#+END_SRC






